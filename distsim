#! /usr/bin/env python

import argparse
import sys
import httplib, urllib
import datetime
from neurogenesis import demux
from neurogenesis import runner
from neurogenesis import extractor
from  neurogenesis.util import Logger
from neurogenesis.base import serialize_sim_data, deserialize_sim_data
from neurogenesis.plotter import plot_simulations

def main():
    arg_parser = argparse.ArgumentParser()
    arg_parser.add_argument("command", help="command to be executed. Possible values are: simulate, extract, plot")
    arg_parser.add_argument("--inifile", help="specifies the location of the ini file to be executed.")
    arg_parser.add_argument("--outdir", help="specifies the location where files should be written to.")
    arg_parser.add_argument("--inetdir", help='location of the inet executable on NFS share')
    arg_parser.add_argument("--omnetdir", help="location of the omnet executable on NFS share")
    arg_parser.add_argument("--additionalFiles", nargs="+", help="additional Files which should be copied to the output dirs")
    arg_parser.add_argument("--nrRanks", help="Nr of ranks the simulation should be distributed to")
    arg_parser.add_argument("--distributionBinary", help="location of the MPI distribution binary")
    arg_parser.add_argument("--hostfile", help = "location of the host file")
    arg_parser.add_argument("--extractScalarsFile", help= "List of scalars to be extracted")
    arg_parser.add_argument("--extractVectorsFile", help= "List of vectors to be extracted")
    arg_parser.add_argument("--metaFile", help="Meta file where simulation metadata is stored")
    arg_parser.add_argument("--plotScript", help="location of the plot script")
    arg_parser.add_argument("--notificationKeyFile", help="location of the pushover keyfile")

    args = arg_parser.parse_args()
    args = write_default_parameters(args)

    if args.command == "simulate":
        Logger.info("Creating simulation configs...")
        simulations = write_sim_config(args)
        run_simulation(args, simulations)
        Logger.info("Saving simulation Metadata")
        serialize_sim_data(args.metaFile, simulations)
        send_notification(args)
    elif args.command == "extract":
        Logger.info("Extracting Scalars")
        updated_simulations = extract_scalars(args)
        Logger.info("done. Writing results back to metafile")
        serialize_sim_data(args.metaFile, updated_simulations)
    elif args.command == "plot":
        plot_simfile(args)
    else:
        Logger.error("Invlaid command: %s" % str(args.command))

def run_simulation(args, simulations):
        Logger.info("Starting distributed Simulation with %i ranks" % args.nrRanks)
        runner.run_simulation(args.distributionBinary, args.hostfile, args.nrRanks, simulations)


def extract_scalars(args):
    simulations = deserialize_sim_data(args.metaFile)
    try:
        simulations = extractor.extract(args.extractScalarsFile, simulations)
    except IOError as e:
        Logger.warning("Can't read scalars file: %s, exception: %s" % (args.extractScalarsFile, e.strerror))
    try:
        simulations = extractor.extract_vectors(args.extractVectorsFile, simulations)
    except IOError as e:
        Logger.warning("Can't read vectors file: %s, exception: %s" % (args.extractVectorsFile, e.strerror))
    return simulations


def plot_simfile(args):
    simulations = deserialize_sim_data(args.metaFile)
    plot_simulations(simulations,args.plotScript)

def write_sim_config(args):
    if args.inifile is None:
        Logger.error("No ini File specified!")
        sys.exit(-127)
    simulations = demux.demux_and_write_simulation(args.inifile, args.outdir, args.inetdir, args.additionalFiles, args.omnetdir)
    return simulations

def send_notification(args):
    try:
    	pushover_secret_file = open(args.notificationKeyFile, "r")
    except IOError:
        Logger.warning("pushover secret-file does not exist")
        return
    secret = pushover_secret_file.read().strip()
    conn = httplib.HTTPSConnection("api.pushover.net:443")
    conn.request("POST", "/1/messages.json",
    urllib.urlencode({
    "token": "ae1u9qxnk2obfgiodr19rrbo2bsazs",
    "user": secret,
    "message": "simulation of file %s with %s ranks finished!" % (args.inifile, args.nrRanks),
  }), { "Content-type": "application/x-www-form-urlencoded" })
    conn.getresponse()

    pushover_secret_file.close()

def write_default_parameters(args):
    if args.distributionBinary is None:
        args.distributionBinary = "/mnt/distsim/simtools/distribute/distribute"

    if args.hostfile  is None:
        args.hostfile = "/mnt/distsim/simtools/hostfile"

    if args.nrRanks is None:
        with open(args.hostfile, "r") as f:
            h = [[y.split("=") for y in x.strip().split()] for x in f if len(x.strip()) > 1 and x[0] != '#']
        args.nrRanks = reduce(lambda x,y: x+int(y[1][1]), h, 0)

    if args.outdir is None:
        args.outdir = "/mnt/distsim/simulations/"

    if args.inetdir is None:
        args.inetdir = "/mnt/distsim/inet/src/"

    additional_files = []

    if args.additionalFiles is not None:
        for file in args.additionalFiles:
            additional_files.append(file)
    args.additionalFiles = additional_files

    if args.omnetdir is None:
        args.omnetdir = "/mnt/distsim/omnetpp-5.0/"
    args.omnetdir += "bin/opp_run"

    if args.extractScalarsFile is None:
        args.extractScalarsFile = "scalars.txt"

    if args.extractVectorsFile is None:
        args.extractVectorsFile = "vectors.txt"

    if args.metaFile is None:
        args.metaFile = "meta.pickle"

    if args.plotScript is None:
        args.plotScript = "plot.py"

    if args.notificationKeyFile is None:
    	args.notificationKeyFile = "pushover_secret"
    return args

if __name__ == '__main__':
    main()
